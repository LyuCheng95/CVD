CLASSIFICATION
    1) Logistic Regression

    2) Gaussian Naive Bayes

    3) Decision Trees & Random Forests

    4) K nearest Neighbours

    5) SVM

    6) Gradient Boost




CLASSIFICATION USING REGRESSION ON NEW DATASET

    1) Linear Regression, Ridge, Lasso, ElasticNet
        RAW
            linear regression                         {'accuracy score:': 0.7288, 'precision score:': 0.7491, 'recall score:': 0.6786, 'f1 score:': 0.7121}
            ridge alpha = 0.001                       {'accuracy score:': 0.7288, 'precision score:': 0.7491, 'recall score:': 0.6786, 'f1 score:': 0.7121}
            ridge alpha = 0.01                        {'accuracy score:': 0.7288, 'precision score:': 0.7491, 'recall score:': 0.6786, 'f1 score:': 0.7121}
            ridge alpha = 0.1                         {'accuracy score:': 0.7288, 'precision score:': 0.7491, 'recall score:': 0.6787, 'f1 score:': 0.7122}
            ridge alpha = 1                           {'accuracy score:': 0.7289, 'precision score:': 0.7489, 'recall score:': 0.6793, 'f1 score:': 0.7124}
            ridge alpha = 10                          {'accuracy score:': 0.7287, 'precision score:': 0.7459, 'recall score:': 0.6843, 'f1 score:': 0.7138}
            ridge alpha = 10                          {'accuracy score:': 0.7287, 'precision score:': 0.7459, 'recall score:': 0.6843, 'f1 score:': 0.7138}
            ridge alpha = 100                         {'accuracy score:': 0.7249, 'precision score:': 0.7234, 'recall score:': 0.7182, 'f1 score:': 0.7208}
            lasso alpha = 0.001                       {'accuracy score:': 0.7289, 'precision score:': 0.7498, 'recall score:': 0.6778, 'f1 score:': 0.712}
            lasso alpha = 0.01                        {'accuracy score:': 0.7154, 'precision score:': 0.7174, 'recall score:': 0.7, 'f1 score:': 0.7086}
            lasso alpha = 0.1                         {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            lasso alpha = 1                           {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            lasso alpha = 10                          {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            lasso alpha = 100                         {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 0.001 l1_ratio = 0.1  {'accuracy score:': 0.7286, 'precision score:': 0.7448, 'recall score:': 0.686, 'f1 score:': 0.7142}
            elastic net alpha = 0.001 l1_ratio = 0.5  {'accuracy score:': 0.7289, 'precision score:': 0.7471, 'recall score:': 0.6826, 'f1 score:': 0.7134}
            elastic net alpha = 0.001 l1_ratio = 0.9  {'accuracy score:': 0.729, 'precision score:': 0.7493, 'recall score:': 0.6789, 'f1 score:': 0.7124}
            elastic net alpha = 0.01 l1_ratio = 0.1   {'accuracy score:': 0.7234, 'precision score:': 0.717, 'recall score:': 0.7275, 'f1 score:': 0.7222}
            elastic net alpha = 0.01 l1_ratio = 0.5   {'accuracy score:': 0.7235, 'precision score:': 0.7182, 'recall score:': 0.7251, 'f1 score:': 0.7216}
            elastic net alpha = 0.01 l1_ratio = 0.9   {'accuracy score:': 0.7166, 'precision score:': 0.7203, 'recall score:': 0.6975, 'f1 score:': 0.7087}
            elastic net alpha = 0.1 l1_ratio = 0.1    {'accuracy score:': 0.522, 'precision score:': 0.5084, 'recall score:': 0.9936, 'f1 score:': 0.6726}
            elastic net alpha = 0.1 l1_ratio = 0.5    {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 0.1 l1_ratio = 0.9    {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 1 l1_ratio = 0.1      {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 1 l1_ratio = 0.5      {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 1 l1_ratio = 0.9      {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 10 l1_ratio = 0.1     {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 10 l1_ratio = 0.5     {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 10 l1_ratio = 0.9     {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 100 l1_ratio = 0.1    {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 100 l1_ratio = 0.5    {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
            elastic net alpha = 100 l1_ratio = 0.9    {'accuracy score:': 0.4943, 'precision score:': 0.4943, 'recall score:': 1.0, 'f1 score:': 0.6616}
        
        BEST
            linear regression                         {'accuracy score:': 0.7288, 'precision score:': 0.7491, 'recall score:': 0.6786, 'f1 score:': 0.7121}
            ridge alpha = 1                           {'accuracy score:': 0.7289, 'precision score:': 0.7489, 'recall score:': 0.6793, 'f1 score:': 0.7124}
            elastic net alpha = 0.001 l1_ratio = 0.9  {'accuracy score:': 0.729, 'precision score:': 0.7493, 'recall score:': 0.6789, 'f1 score:': 0.7124}

    2) NuSVR
        (nu)
        0.3                             {'accuracy': 0.6826, 'precision': 0.6842, 'recall': 0.6644, 'f1 score': 0.6742}
        0.5                             {'accuracy': 0.7309, 'precision': 0.7304, 'recall': 0.7221, 'f1 score': 0.7262}
        0.7                             {'accuracy': 0.7298, 'precision': 0.7232, 'recall': 0.7346, 'f1 score': 0.7289}
        0.9                             {'accuracy': 0.7293, 'precision': 0.7223, 'recall': 0.735, 'f1 score': 0.7286}




DEEP LEARNING ----> layers=[input,64,64,output]

    1) classification on original dataset ----> loss == sparse_categorical+cross_entropy
        (epochs)
        2                               {'accuracy': 0.7275, 'precision': 0.7401, 'recall': 0.6836, 'f1 score': 0.7107}
        5                               {'accuracy': 0.7262, 'precision': 0.7466, 'recall': 0.6675, 'f1 score': 0.7048}
        10                              {'accuracy': 0.7326, 'precision': 0.7471, 'recall': 0.6864, 'f1 score': 0.7154}
        20                              {'accuracy': 0.7288, 'precision': 0.7538, 'recall': 0.6627, 'f1 score': 0.7053}
        50                              {'accuracy': 0.7321, 'precision': 0.7304, 'recall': 0.7251, 'f1 score': 0.7277}



    2) classification using regression on original dataset ----> , epochs=50
        (loss function)
        mean_squared_error              {'accuracy': 0.7346, 'precision': 0.7356, 'recall': 0.7198, 'f1 score': 0.7276}
        mean_absolute_error             {'accuracy': 0.733, 'precision': 0.7589, 'recall': 0.6711, 'f1 score': 0.7123}
        mean_squared_logarithmic_error  {'accuracy': 0.7325, 'precision': 0.7863, 'recall': 0.6272, 'f1 score': 0.6978}



    3) regression on new dataset (cardio_1dp.csv) 
        (loss function)
        mean_squared_error              {'explained variance score': 0.2728, 'mean squared error': 0.1839, 'median absolute error': 0.3177, 'mean absolute error': 0.3684, 'r2 score': 0.2645}
        mean_absolute_error             {'explained variance score': 0.2275, 'mean squared error': 0.1931, 'median absolute error': 0.2543, 'mean absolute error': 0.3193, 'r2 score': 0.2274}
        mean_squared_logarithmic_error  {'explained variance score': 0.2693, 'mean squared error': 0.1891, 'median absolute error': 0.3219, 'mean absolute error': 0.3796, 'r2 score': 0.2437}



    4) classification using regression on new dataset (cardio_1dp.csv)
        (loss function)
        mean_squared_error              {'accuracy': 0.7346, 'precision': 0.7569, 'recall': 0.6823, 'f1 score': 0.7176}
        mean_absolute_error             {'accuracy': 0.7282, 'precision': 0.776, 'recall': 0.6328, 'f1 score': 0.6971}
        mean_squared_logarithmic_error  {'accuracy': 0.7141, 'precision': 0.8247, 'recall': 0.5355, 'f1 score': 0.6494}

    #precision is consistently better than recall for some reason (1,2 and 4)